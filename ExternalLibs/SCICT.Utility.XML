<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SCICT.Utility</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "T:SCICT.Utility.EnumExtensions" -->
        <member name="T:SCICT.Utility.IO.FileTools">
            <summary>
             Generic tools for filing
            </summary>
        </member>
        <member name="M:SCICT.Utility.IO.FileTools.GetWordStartPositionInFile(System.IO.FileStream,System.String)">
            <summary>
            Find the position (byte index) of the given word in the specified stream.
            </summary>
            <param name="fstream"></param>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:SCICT.Utility.IO.FileTools.RemoveLineFromPosition(System.IO.FileStream,System.Int64)">
            <summary>
             Remove a line from file
            </summary>
            <param name="fstream">Opened file stream</param>
            <param name="position">position of line</param>
        </member>
        <member name="T:SCICT.Utility.IO.DictionaryLoader">
            <summary>
             Load dictionary file
            </summary>
        </member>
        <member name="M:SCICT.Utility.IO.DictionaryLoader.LoadFile(System.String)">
            <summary>
             Load file
            </summary>
            <param name="fileName">File name</param>
            <returns>True if suucessfully loade, otherwise False</returns>
        </member>
        <member name="M:SCICT.Utility.IO.DictionaryLoader.NextLine(System.String@)">
            <summary>
             Get next line
            </summary>
            <param name="line">Line contents</param>
            <returns>True if not EOF, False on EOF</returns>
        </member>
        <member name="M:SCICT.Utility.IO.DictionaryLoader.CloseFile">
            <summary>
            Close Stream Reader
            </summary>
        </member>
        <member name="M:SCICT.Utility.IO.DictionaryLoader.AddLine(System.String)">
            <summary>
             Add a term to dictionary
            </summary>
            <param name="line">word</param>
            <returns>True if word successfully added, otherwise False</returns>
        </member>
        <member name="M:SCICT.Utility.IO.DictionaryLoader.AddLine(System.String,System.String)">
            <summary>
             Add a term to dictionary
            </summary>
            <param name="line">word</param>
            <param name="fileName">File name</param>
            <returns>True if word successfully added, otherwise False</returns>
        </member>
        <member name="P:SCICT.Utility.IO.DictionaryLoader.EndOfStream">
            <summary>
             End of Stream
            </summary>
        </member>
        <member name="T:SCICT.Utility.IO.DictionaryWordLoader">
            <summary>
             Load words from dictionary file
            </summary>
        </member>
        <member name="M:SCICT.Utility.IO.DictionaryWordLoader.NextTerm(System.String@)">
            <summary>
             Next dictionary term
            </summary>
            <param name="word">Extracted word</param>
            <returns>True if word successfully extracted, False if EOF</returns>
        </member>
        <member name="M:SCICT.Utility.IO.DictionaryWordLoader.AddTerm(System.String)">
            <summary>
             Add a term to dictionary
            </summary>
            <param name="word">word</param>
            <returns>True if word successfully added, otherwise False</returns>
        </member>
        <member name="M:SCICT.Utility.IO.DictionaryWordLoader.AddTerm(System.String,System.String)">
            <summary>
             Add a term to dictionary
            </summary>
            <param name="word">word</param>
            <param name="fileName">File name</param>
            <returns>True if word successfully added, otherwise False</returns>
        </member>
        <member name="T:SCICT.Utility.IO.DictionaryWordFreqLoader">
            <summary>
             Load words and usage frequency from dictionary file
            </summary>
        </member>
        <member name="M:SCICT.Utility.IO.DictionaryWordFreqLoader.NextTerm(System.String@,System.Int32@)">
            <summary>
             Pars line's content
            </summary>
            <param name="word">Extracted word</param>
            <param name="freq">Extracted word's usage frequency</param>
            <returns>True if word successfully extracted, otherwise False</returns>
        </member>
        <member name="M:SCICT.Utility.IO.DictionaryWordFreqLoader.AddTerm(System.String,System.Int32)">
            <summary>
             Add a term to dictionary
            </summary>
            <param name="word">word</param>
            <param name="freq">word's usage frequency</param>
            <returns>True if word successfully added, otherwise False</returns>
        </member>
        <member name="M:SCICT.Utility.IO.DictionaryWordFreqLoader.AddTerm(System.String,System.Int32,System.String)">
            <summary>
             Add a term to dictionary
            </summary>
            <param name="word">word</param>
            <param name="freq">word's usage frequency</param>
            <param name="fileName">File name</param>
            <returns>True if word successfully added, otherwise False</returns>
        </member>
        <member name="T:SCICT.Utility.IO.DictionaryWordFreqPOSLoader">
            <summary>
             Load words, usage frequency and POS tag from dictionary file
            </summary>
        </member>
        <member name="M:SCICT.Utility.IO.DictionaryWordFreqPOSLoader.NextTerm(System.String@,System.Int32@,System.String@)">
            <summary>
             Pars line's content
            </summary>
            <param name="word">Extracted word</param>
            <param name="freq">Extracted word's usage frequency</param>
            <param name="pos">Extracted word's POS tag</param>
            <returns>True if word successfully extracted, otherwise False</returns>
        </member>
        <member name="M:SCICT.Utility.IO.DictionaryWordFreqPOSLoader.AddTerm(System.String,System.Int32,System.String)">
            <summary>
             Add a term to dictionary
            </summary>
            <param name="word">word</param>
            <param name="freq">word's usage frequency</param>
            <param name="pos">word's POS tag</param>
            <returns>True if word successfully added, otherwise False</returns>
        </member>
        <member name="M:SCICT.Utility.IO.DictionaryWordFreqPOSLoader.AddTerm(System.String,System.Int32,System.String,System.String)">
            <summary>
             Add a term to dictionary
            </summary>
            <param name="word">word</param>
            <param name="freq">word's usage frequency</param>
            <param name="pos">word's POS tag</param>
            <param name="fileName">File name</param>
            <returns>True if word successfully added, otherwise False</returns>
        </member>
        <member name="T:SCICT.Utility.Keyboard.Hotkey">
            <summary>
            
            </summary>
        </member>
        <member name="M:SCICT.Utility.Keyboard.Hotkey.Parse(System.String)">
            <summary>
            Parses and returns a new instance of Hotkey, from the given string
            </summary>
        </member>
        <member name="P:SCICT.Utility.Keyboard.Hotkey.Key">
            <summary>
            Gets the m_key.
            </summary>
            <value>The m_key.</value>
        </member>
        <member name="P:SCICT.Utility.Keyboard.Hotkey.Alt">
            <summary>
            Gets a value indicating whether this <see cref="T:SCICT.Utility.Keyboard.Hotkey"/> contains alt.
            </summary>
            <value><c>true</c> if alt; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SCICT.Utility.Keyboard.Hotkey.Control">
            <summary>
            Gets a value indicating whether this <see cref="T:SCICT.Utility.Keyboard.Hotkey"/> contains control.
            </summary>
            <value><c>true</c> if control; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SCICT.Utility.Keyboard.Hotkey.Win">
            <summary>
            Gets a value indicating whether this <see cref="T:SCICT.Utility.Keyboard.Hotkey"/> contains win.
            </summary>
            <value><c>true</c> if win; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SCICT.Utility.Keyboard.Hotkey.Shift">
            <summary>
            Gets a value indicating whether this <see cref="T:SCICT.Utility.Keyboard.Hotkey"/> contains shift.
            </summary>
            <value><c>true</c> if shift; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SCICT.Utility.Keyboard.Hotkey.Modifiers">
            <summary>
            Gets the m_modifiers.
            </summary>
            <value>The m_modifiers.</value>
        </member>
        <member name="T:SCICT.Utility.Keyboard.IHotkeyEngine">
            <summary>
            
            </summary>
        </member>
        <member name="T:SCICT.Utility.Keyboard.HotkeyEngine">
            <summary>
            
            </summary>
        </member>
        <member name="M:SCICT.Utility.Keyboard.HotkeyEngine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SCICT.Utility.Keyboard.HotkeyEngine"/> class.
            </summary>
        </member>
        <member name="M:SCICT.Utility.Keyboard.HotkeyEngine.#ctor(SCICT.Utility.Keyboard.ApplicationIsActiveDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:SCICT.Utility.Keyboard.HotkeyEngine"/> class.
            </summary>
            <param name="applicationIsActiveDelegate">A function to determine whether application is active or not</param>
        </member>
        <member name="M:SCICT.Utility.Keyboard.HotkeyEngine.RegisterHotkey(SCICT.Utility.Keyboard.Hotkey,System.EventHandler)">
            <summary>
            Registers the hotkey.
            </summary>
            <param name="hotkey">The hotkey.</param>
            <param name="handler">The handler.</param>
            <exception cref="T:System.ArgumentException">If the given hotkey is already registered in our application.</exception>
            <returns></returns>
        </member>
        <member name="M:SCICT.Utility.Keyboard.HotkeyEngine.UnregisterHotkey(SCICT.Utility.Keyboard.Hotkey)">
            <summary>
            Unregisters the hotkey.
            </summary>
            <param name="hotkey">The hotkey.</param>
            <returns></returns>
        </member>
        <member name="P:SCICT.Utility.Keyboard.HotkeyEngine.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SCICT.Utility.Keyboard.KeyboardHelper.KeyCodeToChar(System.Windows.Forms.Keys)">
            <summary>
            Converts a keycode to its corresponding string representation
            </summary>
        </member>
        <member name="T:SCICT.Utility.Keyboard.SystemHotkey">
            <summary>
            Handles a System Hotkey
            </summary>
        </member>
        <member name="M:SCICT.Utility.Keyboard.SystemHotkey.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:SCICT.Utility.Keyboard.SystemHotkey.Error">
            <summary>
            
            </summary>
        </member>
        <member name="T:SCICT.Utility.GDF.GDFBuilder">
            <summary>
            Graphics Based RichText Builder
            </summary>
        </member>
        <member name="T:SCICT.Utility.RTF.RTFBuilderbase">
            <summary>
            Base Class for RtfBuilder and GDF Builder
            Handles format (font , fontstyle, colour) delegating string appending to derived classes. 
            </summary>
        </member>
        <member name="F:SCICT.Utility.RTF.RTFBuilderbase._fontTable">
            <summary>
            
            </summary>
        </member>
        <member name="M:SCICT.Utility.RTF.RTFBuilderbase.AppendRTFDocument(System.String)">
            <summary>
            Appends the RTF document.
            </summary>
            <param name="rtf">The RTF.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.Utility.RTF.RTFBuilderbase.IndexOfFont(SCICT.Utility.RTF.RTFFont)">
            <summary>
            Indexes the of font.
            </summary>
            <param name="font">The font.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.Utility.RTF.RTFBuilderbase.FontStyle(System.Drawing.FontStyle)">
            <summary>
            Changes the Font Style.
            </summary>
            <param name="fontStyle">The font style.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.Utility.RTF.RTFBuilderbase.IndexOf(System.Drawing.Color)">
            <summary>
            Gets the index of the Color.
            Important for merging ColorTables
            </summary>
            <param name="color">The color.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.Utility.RTF.RTFBuilderbase.InsertImage(System.Drawing.Image)">
            <summary>
            Inserts the image.
            </summary>
            <param name="image">The image.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.Utility.GDF.GDFBuilder.#ctor(SCICT.Utility.GDF.GDFPageManager)">
            <summary>
            Initializes a new instance of the <see cref="T:SCICT.Utility.GDF.GDFBuilder"/> class.
            </summary>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:SCICT.Utility.GDF.GDFBuilder.AppendInternal(System.String)">
            <summary>
            Appends the internal.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:SCICT.Utility.GDF.GDFBuilder.UnWrapped">
            <summary>
             Persists Formatting Changes on an GDFBuilder
            </summary>
        </member>
        <member name="T:SCICT.Utility.GDF.GDFBuilder.GDFCell">
            <summary>
            Cell within Table Row
            </summary>
        </member>
        <member name="T:SCICT.Utility.RTF.IBuilderContent">
            <summary>
            Exposes an underlying RTFBuilderbase
            </summary>
        </member>
        <member name="T:SCICT.Utility.GDF.GDFBuilder.GDFRow">
            <summary>
            Table Row
            </summary>
        </member>
        <member name="T:SCICT.Utility.RTF.IRTFRow">
            <summary>
            Row Interface
            </summary>
        </member>
        <member name="T:SCICT.Utility.GDF.GDFDisplayBox">
            <summary>
            Displays GDF Output
            </summary>
        </member>
        <member name="F:SCICT.Utility.GDF.GDFDisplayBox.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SCICT.Utility.GDF.GDFDisplayBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SCICT.Utility.GDF.GDFDisplayBox.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SCICT.Utility.GDF.GDFPage">
            <summary>
            Page of GDF Output
            </summary>
        </member>
        <member name="T:SCICT.Utility.GDF.GDFPageManager">
            <summary>
            Manages GDFPages
            </summary>
        </member>
        <member name="M:SCICT.Utility.RTF.RTFBuilderParser.TokenAction(System.IO.StringReader)">
            <summary>
            runs when / found
            </summary>
            <param name="sr"></param>
            <returns></returns>
        </member>
        <member name="T:SCICT.Utility.RTF.IRtfProcessor">
            <summary>
            Processor of RTF
            </summary>
        </member>
        <member name="F:SCICT.Utility.RTF.RTFAlignment.BottomCenter">
            <summary>Content is vertically aligned at the bottom, and horizontally aligned at the center.</summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="F:SCICT.Utility.RTF.RTFAlignment.BottomLeft">
            <summary>Content is vertically aligned at the bottom, and horizontally aligned on the left.</summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="F:SCICT.Utility.RTF.RTFAlignment.BottomRight">
            <summary>Content is vertically aligned at the bottom, and horizontally aligned on the right.</summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="F:SCICT.Utility.RTF.RTFAlignment.MiddleCenter">
            <summary>Content is vertically aligned in the middle, and horizontally aligned at the center.</summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="F:SCICT.Utility.RTF.RTFAlignment.MiddleLeft">
            <summary>Content is vertically aligned in the middle, and horizontally aligned on the left.</summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="F:SCICT.Utility.RTF.RTFAlignment.MiddleRight">
            <summary>Content is vertically aligned in the middle, and horizontally aligned on the right.</summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="F:SCICT.Utility.RTF.RTFAlignment.TopCenter">
            <summary>Content is vertically aligned at the top, and horizontally aligned at the center.</summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="F:SCICT.Utility.RTF.RTFAlignment.TopLeft">
            <summary>Content is vertically aligned at the top, and horizontally aligned on the left.</summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="F:SCICT.Utility.RTF.RTFAlignment.TopRight">
            <summary>Content is vertically aligned at the top, and horizontally aligned on the right.</summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="T:SCICT.Utility.RTF.RTFBuilder">
            <summary>
            Rich Text Generator
            </summary>
        </member>
        <member name="F:SCICT.Utility.RTF.RTFBuilder.TWIPSA4">
            <summary>
            
            </summary>
        </member>
        <member name="F:SCICT.Utility.RTF.RTFBuilder.TWIPSA4V">
            <summary>
            
            </summary>
        </member>
        <member name="M:SCICT.Utility.RTF.RTFBuilder.CheckChar(System.String)">
            <summary>
            Checks the char.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:SCICT.Utility.RTF.RTFBuilder.RTFFormatWrap">
            <summary>
            Wraps RTFBuilderbase for formatting changes allowing injection of appropriate rtf codes to revert format after each Append (string) call
            </summary>
        </member>
        <member name="T:SCICT.Utility.RTF.RTFBuilder.RTFParaWrap">
            <summary>
            Wraps RtfBuilderbase injecting appropriate rtf codes after paragraph append 
            </summary>
        </member>
        <member name="T:SCICT.Utility.RTF.RTFBuilder.RTFBuilderUnWrapped">
            <summary>
            Cancels persistent Formatting Changes on an unwrapped RtfBuilder
            Exposed by the FormatLock on RtfBuilderbase
            </summary>
        </member>
        <member name="T:SCICT.Utility.RTF.RTFBuilder.RTFCell">
            <summary>
            Cell In Table Row
            </summary>
        </member>
        <member name="T:SCICT.Utility.RTF.RTFBuilder.RTFCellDefinitionBuilder">
            <summary>
            Injects Cell Rtf Codes
            </summary>
        </member>
        <member name="M:SCICT.Utility.RTF.RTFBuilder.RTFImage.GdipEmfToWmfBits(System.IntPtr,System.UInt32,System.Byte[],System.Int32,SCICT.Utility.RTF.RTFBuilder.RTFImage.EmfToWmfBitsFlags)">
            <summary>
            Use the EmfToWmfBits function in the GDI+ specification to convert a 
            Enhanced Metafile to a Windows Metafile
            </summary>
            <param name="_hEmf">
            A handle to the Enhanced Metafile to be converted
            </param>
            <param name="_bufferSize">
            The size of the buffer used to store the Windows Metafile bits returned
            </param>
            <param name="_buffer">
            An array of bytes used to hold the Windows Metafile bits returned
            </param>
            <param name="_mappingMode">
            The mapping mode of the image.  This control uses MM_ANISOTROPIC.
            </param>
            <param name="_flags">
            Flags used to specify the format of the Windows Metafile returned
            </param>
        </member>
        <member name="M:SCICT.Utility.RTF.RTFBuilder.RTFImage.WriteImagePrefix(System.Drawing.Image,System.Single,System.Single)">
            <summary>
            Creates the RTF control string that describes the image being inserted.
            This description (in this case) specifies that the image is an
            MM_ANISOTROPIC metafile, meaning that both X and Y axes can be scaled
            independently.  The control string also gives the images current dimensions,
            and its target dimensions, so if you want to control the size of the
            image being inserted, this would be the place to do it. The prefix should
            have the form ...
            
            {\pict\wmetafile8\picw[A]\pich[B]\picwgoal[C]\pichgoal[D]
            
            where ...
            
            A	= current width of the metafile in hundredths of millimeters (0.01mm)
            	= Image Width in Inches * Number of (0.01mm) per inch
            	= (Image Width in Pixels / Graphics Context's Horizontal Resolution) * 2540
            	= (Image Width in Pixels / Graphics.DpiX) * 2540
            
            B	= current height of the metafile in hundredths of millimeters (0.01mm)
            	= Image Height in Inches * Number of (0.01mm) per inch
            	= (Image Height in Pixels / Graphics Context's Vertical Resolution) * 2540
            	= (Image Height in Pixels / Graphics.DpiX) * 2540
            
            C	= target width of the metafile in twips
            	= Image Width in Inches * Number of twips per inch
            	= (Image Width in Pixels / Graphics Context's Horizontal Resolution) * 1440
            	= (Image Width in Pixels / Graphics.DpiX) * 1440
            
            D	= target height of the metafile in twips
            	= Image Height in Inches * Number of twips per inch
            	= (Image Height in Pixels / Graphics Context's Horizontal Resolution) * 1440
            	= (Image Height in Pixels / Graphics.DpiX) * 1440
            
            </summary>
            <remarks>
            The Graphics Context's resolution is simply the current resolution at which
            windows is being displayed.  Normally it's 96 dpi, but instead of assuming
            I just added the code.
            
            According to Ken Howe at pbdr.com, "Twips are screen-independent units
            used to ensure that the placement and proportion of screen elements in
            your screen application are the same on all display systems."
            
            Units Used
            ----------
            1 Twip = 1/20 Point
            1 Point = 1/72 Inch
            1 Twip = 1/1440 Inch
            
            1 Inch = 2.54 cm
            1 Inch = 25.4 mm
            1 Inch = 2540 (0.01)mm
            </remarks>
            <param name="_image"></param>
            <returns></returns>
        </member>
        <member name="M:SCICT.Utility.RTF.RTFBuilder.RTFImage.WriteRtfImage(System.Drawing.Image)">
            <summary>
            Wraps the image in an Enhanced Metafile by drawing the image onto the
            graphics context, then converts the Enhanced Metafile to a Windows
            Metafile, and finally appends the bits of the Windows Metafile in HEX
            to a string and returns the string.
            </summary>
            <param name="_image"></param>
            <returns>
            A string containing the bits of a Windows Metafile in HEX
            </returns>
        </member>
        <member name="T:SCICT.Utility.RTF.RTFBuilder.RTFRow">
            <summary>
            Rich Table Row
            </summary>
        </member>
        <member name="T:SCICT.Utility.RTF.RTFCellDefinition">
            <summary>
            Definition Of Cell In Table Row
            </summary>
        </member>
        <member name="P:SCICT.Utility.RTF.RTFCellDefinition.Alignment">
            <summary>
            Gets the alignment.
            </summary>
            <value>The alignment.</value>
        </member>
        <member name="P:SCICT.Utility.RTF.RTFCellDefinition.RTFBorderSide">
            <summary>
            Gets the RTFborderside.
            </summary>
            <value>The RTF border side.</value>
        </member>
        <member name="P:SCICT.Utility.RTF.RTFCellDefinition.BorderWidth">
            <summary>
            Gets the width of the border.
            </summary>
            <value>The width of the border.</value>
        </member>
        <member name="P:SCICT.Utility.RTF.RTFCellDefinition.BorderColor">
            <summary>
            Gets the color of the border.
            </summary>
            <value>The color of the border.</value>
        </member>
        <member name="P:SCICT.Utility.RTF.RTFCellDefinition.CellWidthRaw">
            <summary>
            Gets or sets the width of the cell.
            </summary>
            <value>The width of the cell.</value>
        </member>
        <member name="P:SCICT.Utility.RTF.RTFCellDefinition.X">
            <summary>
            Gets the X.
            </summary>
            <value>The X.</value>
        </member>
        <member name="T:SCICT.Utility.RTF.RTFRowDefinition">
            <summary>
            Definition of Rich Table Row
            </summary>
        </member>
        <member name="M:SCICT.Utility.RTF.RTFRowDefinition.#ctor(System.Int32,SCICT.Utility.RTF.RTFAlignment,SCICT.Utility.RTF.RTFBorderSide,System.Int32,System.Drawing.Color,System.Windows.Forms.Padding)">
            <summary>
            Initializes a new instance of the <see cref="T:SCICT.Utility.RTF.RTFRowDefinition"/> struct.
            </summary>
            <param name="rowWidth">Width of the row.</param>
            <param name="alignment">The alignment.</param>
            <param name="rTFBorderSide">The RTFBorderSide.</param>
            <param name="borderWidth">Width of the border.</param>
            <param name="borderColor">Color of the border.</param>
        </member>
        <member name="P:SCICT.Utility.RTF.RTFRowDefinition.Alignment">
            <summary>
            Gets the alignment.
            </summary>
            <value>The alignment.</value>
        </member>
        <member name="P:SCICT.Utility.RTF.RTFRowDefinition.RTFBorderSide">
            <summary>
            Gets the RTF border side.
            </summary>
            <value>The RTF border side.</value>
        </member>
        <member name="P:SCICT.Utility.RTF.RTFRowDefinition.BorderWidth">
            <summary>
            Gets the width of the border.
            </summary>
            <value>The width of the border.</value>
        </member>
        <member name="P:SCICT.Utility.RTF.RTFRowDefinition.BorderColor">
            <summary>
            Gets the color of the border.
            </summary>
            <value>The color of the border.</value>
        </member>
        <member name="P:SCICT.Utility.RTF.RTFRowDefinition.RowWidth">
            <summary>
            Gets or sets the width of the cell.
            </summary>
            <value>The width of the cell.</value>
        </member>
        <member name="T:SCICT.Utility.RTF.RTFUtil">
            <summary>
            A Work in Progress
            </summary>
        </member>
        <member name="T:SCICT.Utility.Windows.VK">
            <summary>
            Virtual Keys
            </summary>
        </member>
        <member name="T:SCICT.Utility.Windows.WindowsHooks">
            <summary>
            Windows Hook constants (hook ids)
            </summary>
        </member>
        <member name="T:SCICT.Microsoft.Windows.MSG">
            <summary>
            Structure used by WH_GETMESSAGE
            </summary>
        </member>
        <member name="T:SCICT.Microsoft.Windows.CWPSTRUCT">
            <summary>
            Message structure used by WH_CALLWNDPROC
            </summary>
        </member>
        <member name="T:SCICT.Microsoft.Windows.MessageEventHandler">
            <summary>
            Defines a delegate for Message handling
            </summary>
        </member>
        <member name="T:SCICT.Microsoft.Windows.NativeWindowWithEvent">
            <summary>
            Inherits from System.Windows.Form.NativeWindow. Provides an Event for Message handling
            </summary>
        </member>
        <member name="T:SCICT.Microsoft.Windows.DummyWindowWithEvent">
            <summary>
            Inherits from NativeWindowWithEvent and automatic creates/destroys of a dummy window
            </summary>
        </member>
        <member name="T:SCICT.Utility.RoundQueue`1">
            <summary>
            RoundQueue used in N-Gram text reading
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SCICT.Utility.SpellChecker.IgnoreList">
            <summary>
             An ignore list used to ignore desired words from processing
            </summary>
        </member>
        <member name="M:SCICT.Utility.SpellChecker.IgnoreList.AddToIgnoreList(System.String)">
            <summary>
            Add a word to ignore list 
            </summary>
            <param name="word">Input word</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.Utility.SpellChecker.IgnoreList.RemoveFromIgnoreList(System.String)">
            <summary>
            Remove a word to ignore list 
            </summary>
            <param name="word">Input word</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.Utility.SpellChecker.IgnoreList.ClearIgnoreList">
            <summary>
            Clear ignore list
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.Utility.SpellChecker.IgnoreList.IsExistInIgnoreList(System.String)">
            <summary>
            check for word existance in ignore list
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="T:SCICT.Utility.SpellChecker.DictionaryTools">
            <summary>
             Tools for dictionary
            </summary>
        </member>
        <member name="M:SCICT.Utility.SpellChecker.DictionaryTools.LoadDic(System.String)">
            <summary>
             Load a dictionary
            </summary>
            <param name="dictionaryFileName">Dictionary path</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SCICT.Utility.SpellChecker.DictionaryTools.LoadDic(System.String,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
             Load a dictionary into given data structure
            </summary>
            <param name="dictionaryFileName">Dictionary path</param>
            <param name="entry">Dictionary data structure</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SCICT.Utility.SpellChecker.DictionaryTools.LoadDic(System.String,System.Collections.Generic.Dictionary{System.String,System.Int32[]})">
            <summary>
             Load a dictionary into given data structure considering affix combination
            </summary>
            <param name="dictionaryFileName">Dictionary path</param>
            <param name="entry">Dictionary data structure</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SCICT.Utility.SpellChecker.DictionaryTools.GenerateLanguageModel(System.String)">
            <summary>
             Genrate a dictionary (language model) from a text corpus
            </summary>
            <param name="corpusFileName">Courpus path</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SCICT.Utility.SpellChecker.DictionaryTools.DumpDic(System.String,System.Int32,System.Int32)">
            <summary>
             Dump dictionary to disk
            </summary>
            <param name="fileName">File path</param>
            <param name="count">Word with smaller usage frequency does not dumped</param>
            <param name="length">Word with smaller length does not dumped</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SCICT.Utility.SpellChecker.DictionaryTools.AppendDictionary(System.String)">
            <summary>
             Append another dictionary
            </summary>
            <param name="dictionaryFileName">Dictionary path</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:SCICT.Utility.SpellChecker.LanguageModel">
            <summary>
             Generate a dictionary and freqency of usage of each word from text corpus
            </summary>
        </member>
        <member name="M:SCICT.Utility.SpellChecker.LanguageModel.AddWord(System.String)">
            <summary>
             Add a word
            </summary>
            <param name="word">Word</param>
        </member>
        <member name="M:SCICT.Utility.SpellChecker.LanguageModel.AddWord(System.String,System.Int32)">
            <summary>
             Add word with usage frequency
            </summary>
            <param name="word">Word</param>
            <param name="freq">Usage frequency</param>
        </member>
        <member name="M:SCICT.Utility.SpellChecker.LanguageModel.AddWord(System.String[])">
            <summary>
             Add alist of word
            </summary>
            <param name="wordList">List of word</param>
        </member>
        <member name="M:SCICT.Utility.SpellChecker.LanguageModel.AddPlainText(System.String)">
            <summary>
             Add a text corpus
            </summary>
            <param name="text">Text string</param>
        </member>
        <member name="M:SCICT.Utility.SpellChecker.LanguageModel.SaveOnDisk(System.String)">
            <summary>
             Save dictionary to disk
            </summary>
            <param name="fileName">Absolute path of file</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SCICT.Utility.SpellChecker.LanguageModel.SaveOnDisk(System.String,System.Boolean)">
            <summary>
             Save dictionary to disk
            </summary>
            <param name="fileName">Absolute path of file</param>
            <param name="append">Append dictionary to existing file</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:SCICT.Utility.SpellChecker.SessionLogger">
            <summary>
             Log user's activity and sort by frequent of usage in each session
            </summary>
        </member>
        <member name="M:SCICT.Utility.SpellChecker.SessionLogger.AddUsage(System.String)">
            <summary>
             Add a usage log
            </summary>
            <param name="word">Word</param>
        </member>
        <member name="M:SCICT.Utility.SpellChecker.SessionLogger.Sort(System.String[])">
            <summary>
             Sort a list of word by usage frequency
            </summary>
            <param name="words">Word</param>
            <returns>Sorted List</returns>
        </member>
    </members>
</doc>
